worker_processes 1;

events {
    worker_connections 1024;
}

env PUBLIC_KEY;

http {
    # geoip_country /usr/share/GeoIP/GeoIP.dat;

    log_format json_analytics escape=json '{'
                    '"msec": "$msec", ' # request unixtime in seconds with a milliseconds resolution
                    '"connection": "$connection", ' # connection serial number
                    '"connection_requests": "$connection_requests", ' # number of requests made in connection
                    '"pid": "$pid", ' # process pid
                    '"request_id": "$request_id", ' # the unique request id
                    '"request_length": "$request_length", ' # request length (including headers and body)
                    '"remote_addr": "$remote_addr", ' # client IP
                    '"remote_user": "$remote_user", ' # client HTTP username
                    '"remote_port": "$remote_port", ' # client port
                    '"time_local": "$time_local", '
                    '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
                    '"request": "$request", ' # full path no arguments if the request
                    '"request_uri": "$request_uri", ' # full path and arguments if the request
                    '"args": "$args", ' # args
                    '"status": "$status", ' # response status code
                    '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
                    '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
                    '"http_referer": "$http_referer", ' # HTTP referer
                    '"http_user_agent": "$http_user_agent", ' # user agent
                    '"http_x_forwarded_for": "$http_x_forwarded_for", ' # http_x_forwarded_for
                    '"http_host": "$http_host", ' # the request Host: header
                    '"server_name": "$server_name", ' # the name of the vhost serving the request
                    '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
                    '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
                    '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
                    '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
                    '"upstream_response_time": "$upstream_response_time", ' # time spend receiving upstream body
                    '"upstream_response_length": "$upstream_response_length", ' # upstream response length
                    '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
                    '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
                    '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
                    '"scheme": "$scheme", ' # http or https
                    '"request_method": "$request_method", ' # request method
                    '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
                    '"pipe": "$pipe", ' # "p" if request was pipelined, "." otherwise
                    '"gzip_ratio": "$gzip_ratio", '
                    '"http_cf_ray": "$http_cf_ray",'
                    # '"geoip_country_code": "$geoip_country_code"'
                    '}';

    # Путь логов по умолчанию в образе openresty
    access_log  /usr/local/openresty/nginx/logs/access.log   json_analytics;
    access_log  /usr/local/openresty/nginx/logs/website_access.log   json_analytics;

    lua_package_path "/usr/local/openresty/lualib/?.lua;;";

    lua_shared_dict jwt_cache 10m;

    upstream protected_content_processor {
        server host.docker.internal:8001;
    }

    upstream protected_events_service {
        server host.docker.internal:8002;
    }

    upstream protected_users_service {
        server host.docker.internal:8003;
    }

    upstream protected_notifications {
        server host.docker.internal:8004;
    }

    server {
        listen 80;
        server_name localhost;


        # public paths

        # redirect to s3
        location /api/content_processor/files/s3/ {
            proxy_pass http://protected_content_processor;
            include proxy_headers.conf;
        }

        location /api/notifications/docs {
            proxy_pass http://protected_notifications;
            include proxy_headers.conf;
        }

        location /api/content_processor/docs {
            proxy_pass http://protected_content_processor;
            include proxy_headers.conf;
        }

        #users
        location /api/users_service/auth/ {
            proxy_pass http://protected_users_service;
            include proxy_headers.conf;
        }

        location /api/users_service/swagger-ui {
            proxy_pass http://protected_users_service;
            include proxy_headers.conf;
        }

        location /api/users_service/v3/api-docs {
            proxy_pass http://protected_users_service;
            include proxy_headers.conf;
        }


        location /api/users_service/docs {
            proxy_pass http://protected_users_service;
            include proxy_headers.conf;
        }

        #events
        location /api/events_service/swagger-ui {
            proxy_pass http://protected_events_service;
            include proxy_headers.conf;
        }

        location /api/events_service/v3/api-docs {
            proxy_pass http://protected_events_service;
            include proxy_headers.conf;
        }

        location /api/events_service/docs {
            proxy_pass http://protected_events_service;
            include proxy_headers.conf;
        }

        # protected paths

        location /api/content_processor/ {
            access_by_lua_file /usr/local/openresty/nginx/lua/jwt_auth.lua;
            proxy_pass http://protected_content_processor;
            include proxy_headers.conf;
        }

        location /api/notifications/ {
            access_by_lua_file /usr/local/openresty/nginx/lua/jwt_auth.lua;
            proxy_pass http://protected_notifications;
            include proxy_headers.conf;
        }

        location /api/events_service/ {
            access_by_lua_file /usr/local/openresty/nginx/lua/jwt_auth.lua;
            proxy_pass http://protected_events_service;
            include proxy_headers.conf;
        }

        location /api/users_service/ {
            access_by_lua_file /usr/local/openresty/nginx/lua/jwt_auth.lua;
            proxy_pass http://protected_users_service;
            include proxy_headers.conf;
        }

        location /metrics {
            stub_status on;
            access_log on;
            allow all;
        }

        location / {
            deny all;
            return 403;
        }

    }

}
