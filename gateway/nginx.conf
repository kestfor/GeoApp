worker_processes 1;

events {
    worker_connections 1024;
}

env PUBLIC_KEY;

http {

    lua_package_path "/usr/local/openresty/lualib/?.lua;;";

    lua_shared_dict jwt_cache 10m;

    upstream protected_content_processor {
        server host.docker.internal:8001;
    }

    upstream protected_events_service {
        server host.docker.internal:8002;
    }

    upstream protected_users_service {
        server host.docker.internal:8003;
    }

    upstream protected_notifications {
        server host.docker.internal:8004;
    }




    server {
        listen 80;
        server_name localhost;

        location /api/ {

            # public paths
            location /api/users_service/auth {
                proxy_pass http://protected_users_service;
                include proxy_headers.conf;
            }

            location /api/notifications/docs {
                proxy_pass http://protected_notifications
                include proxy_headers.conf
            }

            location /api/content_processor/docs {
                proxy_pass http://protected_content_processor
                include proxy_headers.conf
            }

            # protected paths

            location /api/content_processor/ {
                access_by_lua_file /usr/local/openresty/nginx/lua/jwt_auth.lua;
                proxy_pass http://protected_content_processor;
                include proxy_headers.conf;
            }

            location /api/notifications/ {
                access_by_lua_file /usr/local/openresty/nginx/lua/jwt_auth.lua;
                proxy_pass http://protected_notifications;
                include proxy_headers.conf;
            }

            location /api/events_service/ {
                access_by_lua_file /usr/local/openresty/nginx/lua/jwt_auth.lua;
                proxy_pass http://protected_events_service;
                include proxy_headers.conf;
            }

            location /api/users_service/ {

                access_by_lua_file /usr/local/openresty/nginx/lua/jwt_auth.lua;
                proxy_pass http://protected_users_service;
                include proxy_headers.conf;
            }

        }

        location / {
            deny all;
            return 403;
        }

    }
}